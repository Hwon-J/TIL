HTML: 구조  CSS: 스타일링

<CSS Box model>  
CSS원칙 1
-모든 요소는 네모(박스모델)이고, 위에서 아래로 왼쪽에서 오른쪽으로 쌓인다.
-하나의 박스는 네 부분(영역)으로 이루어짐
     - content: 글이나 이미지 등 요소의 실제 내용
     - padding: 테두리 안쪽 내부 여백, 요소에 지정된 배경색, 이미지는 padding까지 적용
     - border: 테두리 영역
     - margin : 테두리 바깥 외부 여백, 배경색 지정불가


<boxmodel 구성>
--------------------------------------------------------------------------------------------------------------------------------
< top,bottom,left, right 나누어 설정가능 >
.margin{
  margin-top: 10px;
  margin-right: 10px;
  margin-bottom: 10px;
  margin-left: 10px;
}

<표시가 없고 값만 있으면 4방향 동일>
.margin-padding{
  margin: 10px;
  padding: 30px;

.border{
  border-width: 2px;
  border-style: dashed; 
  border-color: black;


[margin shorthand]
<상하는 10px, 좌우는 20px>
.margin{
  margin:10px 20px;
}

<위쪽 10px, 좌우 20px 아래 30px>
.margin{
  margin:10px 20px 30px;
}

<위쪽 10px, 오른쪽 20px 아래 30px, 왼쪽 40px(시계방향)>
.margin{
  margin:10px 20px 30px 40px;
}


[border shorthand]
.border{
  border-width: 2px;
  border-style: dashed; 
  border-color: black;
위의 코드를 아래코드로 축약 가능
.border{
  border: 2px dashed black;
}

<실습>
<body>
  <div class="box1">div</div>
  <div class="box2">div</div>
</body>
<style>
  .box1{
    width: 500px;
    border-width: 2px;
    border-style: dashed;
    border-color: black;
    padding-left: 50px;
    margin-bottom: 30px;
  }

  .box2{
    width: 500px;
    border: 2px solid black;
    padding: 20px 30px;
  }
  
</style>

----------------------<2>-----------------------------------

<body>
  <div class="box">div</div>
  <div class="box box-sizing">div</div>
</body>
<style>
  .box{
    width: 100px;
    margin: 10px auto;
    padding: 20px;
    border: 1px solid black;
    color: white;
    /* 텍스트 정렬: 가운데 */
    text-align: center;
    background-color: darkviolet;
  }

  .box-sizing{
      
    box-sizing: border-box;
    margin-top: 50px;
  }
</style>

여기서 box의 넓이는??
보통 일반적으로 width = contents + padding + border이 넓이라고 생각함
하지만 width를 그냥 쓰면 content=100으로 인식

<box-sizing>
기본적으로 모든 요소의 box-sizing은 content-box
 padding을 제외한 순수 contents 영역만을 box로 지정
content-box= content
다만, 우리가 일반적으로 영역을 볼 때 border 까지의 너비를 100px로 보는 것을 원함
그 경우 box-sizing을 border-box로 설정
border-box= content + padding + border
따라서 content=58, padding=20*2 +bosder=1*2


<크롬 개발자 도구>-F12
- 웹 브라우저 크롬에서 제공하는 개발과 관련된 다양한 기능을 제공
-주요기능
     -Element: DOM 탐색 및 CSS 확인 및 변경
          - 해당 요소의 HTML태그, HTML태그 구조를 탐색하며 추가, 삭제, 이동, 편집 가능
          -Styles: 요소에 적용된 CSS 확인 (해당요소에 선언된 모든 css)
          -Computed: 스타일이 계산된 최종 결과(css)
          -Event Listeners: 해당요소에 적용된 이벤트(JS)
-우선순위, 파일로딩 등에 의해 적용되고 있는 모든 css 확인 가능
-원하는 속성을 제거해보거나, 값을 변경하여 결과를 바로 확인할 수 있음
->박스 모델의 값을 쉽게 변경할 수 있음
-> 해당요소에 대한 스타일을 다양하게 추가해 볼 수 있음


-<html 에멧(emmet)>---------------
class='.'
id='#'
div.content 입력
 <div class="content"></div>

div.content*3 입력
  <div class="content"></div>
  <div class="content"></div>
  <div class="content"></div>

div#my 입력
  <div id="my"></div>

div#my*3 입력
  <div id="my"></div>
  <div id="my"></div>
  <div id="my"></div>

div.my-content>p#test*3 입력
<div class="my-content">
    <p id="test"></p>
    <p id="test"></p>
    <p id="test"></p>
  </div>
-> div의 class로 my-content를 만들고 그것의 자식으로 p태그를 만드는데 id가 test인 것을 3번 반복

div: 영역을 나누는 것

<p id="test">lorem</p> : lorem입력
-> 한단락의 의미 없는 문장이 생겨남
-> 텍스트가 채워져 있어야 화면이 업덯게 구성되있는지 확인이 가능하므로 그럴 때 사용
lorem10: 랜덤 단어 10개, lorem*n: n개의 단락 생성 
--------------------------------------------------------------------------

-<css 에멧(emmet)>---------------
.my-class{
  margin-top: 10px;     (=='mt10'입력)
  margin-bottom: 10px;  (=='mb10'입력)
  width: 100px;     (=='w100'입력)
}
* mt, mb, pt, pb, w, h(height) 모두 가능
--------------------------------------------

CSS원칙 2
display에 따라 크기와 배치가 달라진다.

블록요소: 한줄(화면 크기 전체의 가로폭)을 모두 차지함 (다음 요소는 아래로 붙음)
(div)	너비 높이 마진 탑 바텀 지정 가능
	줄바꿈이 일어나는 요소 (다른elem을 밀어냄)
	블록 레벨 요소 안에 인라인 요소가 들어갈 수 있음
	EX) div / ul, ol, li / p / hr / form 등

인라인 요소: content를 마크업 하는만큼만 차지함 (옆으로 다음 요소가 붙음)
(span)	  너비 높이 마진 탑 바텀 지정 불가
	  줄바꿈이 일어나지 않는 행의 일부 요소
	  상하 여백은 line-height로 지정
	  EX) span / a / img / input,label / b, em , i, strong 등

블록요소를 width를 사용하여 content를 제한하면 블록의 나머지는 margin이 된다.

<속성에 따른 수평정렬>
블록요소를 수평정렬한다==마진의 영역을 정렬한다는 뜻

> 마진이 오른쪽에 위치함(==conntent는 왼쪽)
margin-right: auto;
> 마진이 왼쪽에 위치함(==content는 오른쪽)
margin-left: auto;
> 마진이 양옆에 위치함(==content는 중앙)
margin-right: auto;
margin-left: auto;

> 텍스트 정렬( 글씨를 왼쪽, 오른쪽, 중앙)
text-align : left;
text-align : right;
text-align : center;

만약 글씨를 상하중앙에 놓고 싶다면 margin-top 사용
하지만 인라인 요소는 마진이 들어가지 않음 따라서 line-height를 사용
line-height: 100px; -> 박스의 높이만큼  px지정(위아래 중앙에 놓임)

block, inline을 변경할 때 display: inline; 또는 display: block; 사용

display: inline block
- 블록과 인라인 요소를 모두 가짐
- 인라인처럼 한 줄에 표시 가능하고, 블록처럼 너비, 높이, 마진 지정 가능

display: none
- 해당요소를 화면에 표시하지 않고, 공간조차 부여되지 않음
- 이와 비슷한 visibility: hidden은 해당요소가 공간은 차지하나 화면에 표시하지 않는다.


<CSS position>
- 문서 상에서 요소의 위치를 지정
     -static: 모든 태그의 기본 값(기준 위치)
	-일반적인 요소의 배치 순서에 따름(좌측 상단)
	-부모요소 내에 배치될 때는 부모 요소의 위치를 기준으로 배치됨
     - 아래는 좌표 프로퍼티(top, bottom left, right)를 사용하여 이동 가능
	-relative: 상대 위치
		-자기 자신의 static 위치를 기준으로 이동 (normal flow 유지)
		-레이아웃에서 요소가 차지하는 공간은 static일 때와 같음
	-absolute: 절대 위치
		-요소를 일반적인 문서 흐름에서 제거 후 레이아웃에 공간을 차지하지 않음(normal flow 벗어남)
		-static이 아닌 가장 가까이 있는 부모/조상 요소를 기준으로 이동(없다면 body)
		- A-B-C를 유지하고 있다가 B가 absolute되면 B는 normal flow에서 벗어났으므로 A-C로 변경됨 
	-fixed: 고정위치
		-요소를 일반적인 문서 흐름에서 제거 후 레이아웃에 공간을 차지하지 않음(normal flow 벗어남)
		-부모요소 관계 없이 viewport(보이는 창의 크기)를 기준으로 이동
		     -스크롤시에도 항상 같은 곳에 위치함
	-sticky: 스크롤에 따라 static->fixed로 변경
		-속성을 적용한 박스는 문서 안에서 position:static과 같이 일반적인 흐름에 따르지만, 
		 스크롤 위치가 임계점에 이르면 position:fixed와 같이 박스를 화면에 고정할 수 있는 속성

 


